{"version":3,"sources":["utils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","width","height","analyzer","bufferLength","handleError","console","log","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","audioCtx","AudioContext","createAnalyser","source","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect"],"mappings":"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","file":"sound.66e01127.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\n  let r;\n  let g;\n  let b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import { hslToRgb } from \"./utils\";\n\n// create width and height variables (all the calculations will be based off them)\n//Higher numbers slow down computers while lower ones make them more responsive\nconst WIDTH = 1500;\nconst HEIGHT = 1500;\n\n//grab the canvas and the context\nconst canvas = document.querySelector(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = WIDTH;\ncanvas.height = HEIGHT;\n\n//\nlet analyzer;\nlet bufferLength;\n\n//error handling function\nfunction handleError() {\n  console.log(\"You must give access to your mic in order to proceed\");\n}\n\n// get the audio and the data about the frequency, time ...\nasync function getAudio() {\n  //get access to the user's microphone\n  const stream = await navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .catch(handleError);\n\n  //get the audio context in the browser\n  const audioCtx = new AudioContext();\n  analyzer = audioCtx.createAnalyser();\n  //create a source that'll take the stream and pipe it into the audio ctx then connect it to the analyzer\n  const source = audioCtx.createMediaStreamSource(stream);\n  source.connect(analyzer);\n\n  //determine how much data you want to collect\n  analyzer.fftSize = 2 ** 10;\n  bufferLength = analyzer.frequencyBinCount;\n  //pull the data off the audio. Grab it in an array (each array can only be 8 bites of 1  byte)\n  const timeData = new Uint8Array(bufferLength);\n  // do the same for the frequency\n  const frequencyData = new Uint8Array(bufferLength);\n\n  drawTimeData(timeData);\n  drawFrequency(frequencyData);\n}\n\nfunction drawTimeData(timeData) {\n  //inject the time data into the timeData array\n  analyzer.getByteTimeDomainData(timeData);\n  //add the UI\n  //clear the canvas\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\n  //set it up\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = \"#ffc600\";\n  ctx.beginPath();\n  const sliceWidth = WIDTH / bufferLength;\n  let x = 0;\n  timeData.forEach((data, i) => {\n    const v = data / 128;\n    const y = (v * HEIGHT) / 1.5;\n    //draw the lines\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  });\n  ctx.stroke();\n  //make the function call itself ASAP\n  requestAnimationFrame(() => drawTimeData(timeData));\n}\n\nfunction drawFrequency(frequencyData) {\n  //get the frequency data into the frequencyData array\n  analyzer.getByteFrequencyData(frequencyData);\n\n  //add the UI\n  //figure out the bar width\n  const barWidth = (WIDTH / bufferLength) * 2.5;\n  let x = 0;\n  frequencyData.forEach((amount) => {\n    const percent = amount / 255;\n    const [h, s, l] = [360 / (percent * 360), 0.5, 0.8, 0.5];\n    const barHeight = HEIGHT * percent * 0.5;\n    //convert the color to HSL\n    const [r, g, b] = hslToRgb(h, s, l);\n    ctx.fillStyle = `rgba(${r}, ${g}, ${b}, 0.5)`;\n    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n    x += barWidth + 2;\n  });\n  // make it call itself\n  requestAnimationFrame(() => drawFrequency(frequencyData));\n}\n\ngetAudio();\n"]}